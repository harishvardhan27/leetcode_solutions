Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

SOLUTION:

class Solution{
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length<nums2.length) 
            return findMedianSortedArrays(nums2,nums1);
        int m=nums1.length;
        int n=nums2.length;
        int l=m+n;
        int i=0,j=0,k=0;
        int arr[]=new int[l];
        while(i<m&&j<n){
            if(nums1[i]<nums2[j]){
                arr[k++]=nums1[i++];
            } 
            else{
                arr[k++]=nums2[j++];
            }
        }
        while(i<m)
        {
            arr[k++]=nums1[i++];
        }
        while(j<n){
            arr[k++]=nums2[j++];
        }
        return(nums1.length+nums2.length)%2!=0?arr[(nums1.length + nums2.length)/2]:(double)(arr[((nums1.length + nums2.length)-1)/2]+arr[((nums1.length + nums2.length)-1)/2 + 1])/2;
    }
}
